<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- spring bean 구성 파일에는 스프링이 톰캣 기동 시에 생성해야되는 클래스 객체를 정의합니다.
     톰캣 기동 시에 스프링 프레임워크에 의해서 자동으로 빈(클래스 객체)이 구성됩니다. -->
     
<!-- 방법1: JDBC 정보를 직접 설정: HikariCP 사용기준 -->
	<!-- 1. JDBC 요구 정보가 설정된 HikariConfig 빈 생성-->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig" ><!-- 
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/> -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/><!-- 
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"/> -->
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="book_ex" />
		<property name="password" value="book_ex" />
	</bean>
	
	<!-- 2. CP 객체가 생성됨: dataSource 빈 생성: HikariConfig 빈 주입 받음 -->
	<!--    CP객체와 RDBMS 서비스가 jdbc를 이용하여 연결됨 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>

<!-- 방법2: JDBC 정보를 properties 파일에 정의 --><!-- 

	<context:property-placeholder location="classpath:properties/jdbc/myjdbc.properties"/>

	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig" >
		<property name="driverClassName" value="${jdbcHikari.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbcHikari.jdbcUrl}"/>
		<property name="username" value="${jdbcHikari.username}" />
		<property name="password" value="${jdbcHikari.password}" />
	</bean>
	
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean> -->


<!-- mybatis-spring 연동구성(dataSource 빈을 주입받음) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" >
			<list>
				<value>classpath:com/spring5/mypro00/mapper/MyBoardMapper.xml</value>
				<value>classpath:com/spring5/mypro00/mapper/MyReplyMapper.xml</value>
				<value>classpath:com/spring5/mypro00/mapper/MyBoardAttachFileMapper.xml</value>
				<value>classpath:mappers/BoardMapper.xml</value>
				<value>classpath:com/spring5/mypro00/mapper/MyScheduledMapper.xml</value>
				<value>classpath:com/spring5/mypro00/mapper/MyMemberMapper.xml</value>
			</list>
		</property>
	
	</bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	
	<mybatis-spring:scan base-package="com.spring5.mypro00.mapper" template-ref="sqlSession"/><!-- 
	<mybatis-spring:scan base-package="com.spring5.mypro00.mapper" factory-ref="sqlSessionFactory"/> -->
	
<!-- @Transaction 어노테이션 기능을 활성화(스프링 트랜잭션 기능 활성화) -->
	<tx:annotation-driven transaction-manager="txManager"/>	
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	
	<!-- MyBoardDAO를 사용할 경우: 생성자 주입, --><!-- 
	<bean id="myBoardDAO" class="com.spring5.mypro00.dao.MyBoardDAO">
		<constructor-arg ref="sqlSession"/>
	</bean> -->

	<!-- MyBoardDAO를 사용할 경우: Setter 방식 주입, --><!-- 
	<bean id="myBoardDAO" class="com.spring5.mypro00.dao.MyBoardDAO">
		<property name="sqlSession" ref="sqlSession"/>
	</bean> --><!-- 
	
	<context:component-scan base-package="com.spring5.mypro00.dao"/> -->


	<bean id="hikariConfigHR" class="com.zaxxer.hikari.HikariConfig" > 
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"/>
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="hr" />
		<property name="password" value="oracle4U" />
	</bean>

	<bean id="dataSourceHR" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfigHR" /> 
	</bean>


	<bean id="sqlSessionFactoryHR" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSourceHR" />
		<property name="mapperLocations" >
			<list>
				<value>classpath:mappers/EmpMapper.xml</value>
			</list>
		</property>
	
	</bean>
	
	<bean id="sqlSessionHR" class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg index="0" ref="sqlSessionFactoryHR" />
		
	</bean>
	
	<mybatis-spring:scan base-package="com.spring5.mypro00.mapperhr" template-ref="sqlSessionHR"/><!-- 
	<mybatis-spring:scan base-package="com.spring5.mypro00.mapperhr" factory-ref="sqlSessionFactoryHR"/> -->


	<tx:annotation-driven transaction-manager="txManagerHR"/>	
	
	<bean id="txManagerHR" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceHR"/>
	</bean>
</beans>
